{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCIA,IAAM,EAAO,SAAS,aAAa,CAAC,QAC9B,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAU,EAAM,gBAAgB,CAAC,MACjC,EAAQ,EAAM,aAAa,CAAC,SAC5B,EAAQ,EAAM,gBAAgB,CAAC,MAE/B,GADM,EAAG,EAAM,gBAAgB,CAAC,OACpB,MAAM,EAAQ,MAAM,EAAE,IAAI,CAAC,CAAA,IAM7C,EAAQ,OAAO,CAAC,SAAC,CAAA,CAAQ,CAAzB,EACE,EAAO,gBAAgB,CAAC,QAAS,WAC/B,EAAa,EACf,EACF,GAEA,IAAM,EAAe,SAAC,CAAtB,EAGE,IAAM,EAAa,AAZX,EAAG,EAAM,gBAAgB,CAAC,OAYV,IAAI,CAAC,SAAC,CAAA,CAAG,CAAjC,EACE,IAAM,EAAS,EAAE,KAAK,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,GAC9C,EAAS,EAAE,KAAK,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,GAEpD,GAAI,CAAC,MAAM,IAAW,CAAC,MAAM,GAC3B,OAAO,CAAS,CAAC,EAAY,CAAG,EAAS,EAAS,EAAS,EAG7D,GAAI,AAAgB,IAAhB,EAAmB,CACrB,IAAM,EAAU,WAAW,EAAO,OAAO,CAAC,QAAS,KAC7C,EAAU,WAAW,EAAO,OAAO,CAAC,QAAS,KAEnD,OAAO,CAAS,CAAC,EAAY,CAAG,EAAU,EAAU,EAAU,CAChE,CAEA,OAAO,CAAS,CAAC,EAAY,CACzB,EAAO,aAAa,CAAC,GACrB,EAAO,aAAa,CAAC,EAC3B,EAEA,CAAA,EAAM,SAAS,CAAG,GACl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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// Sorting by header of column:\nvar body = document.querySelector(\"body\");\nvar table = document.querySelector(\"table\");\nvar headers = table.querySelectorAll(\"th\");\nvar tBody = table.querySelector(\"tbody\");\nvar cells = tBody.querySelectorAll(\"td\");\nvar rows = _to_consumable_array(tBody.querySelectorAll(\"tr\"));\nvar sortOrder = Array(headers.length).fill(true);\nfunction updateRows() {\n    rows = _to_consumable_array(tBody.querySelectorAll(\"tr\"));\n}\nheaders.forEach(function(header, index) {\n    header.addEventListener(\"click\", function() {\n        setSortTable(index);\n    });\n});\nvar setSortTable = function(columnIndex) {\n    var _tBody;\n    updateRows();\n    var sortedRows = rows.sort(function(a, b) {\n        var aValue = a.cells[columnIndex].textContent.trim();\n        var bValue = b.cells[columnIndex].textContent.trim();\n        if (!isNaN(aValue) && !isNaN(bValue)) return sortOrder[columnIndex] ? aValue - bValue : bValue - aValue;\n        if (columnIndex === 4) {\n            var aSalary = parseFloat(aValue.replace(/[$,]/g, \"\"));\n            var bSalary = parseFloat(bValue.replace(/[$,]/g, \"\"));\n            return sortOrder[columnIndex] ? aSalary - bSalary : bSalary - aSalary;\n        }\n        return sortOrder[columnIndex] ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n    });\n    tBody.innerHTML = \"\";\n    (_tBody = tBody).append.apply(_tBody, _to_consumable_array(sortedRows));\n    sortOrder[columnIndex] = !sortOrder[columnIndex];\n};\n// Selecting row:\n_to_consumable_array(tBody.rows).forEach(function(row) {\n    row.addEventListener(\"click\", function(e) {\n        var rowsActive = tBody.querySelectorAll(\"tr.active\");\n        rowsActive.forEach(function(rowActive) {\n            rowActive.classList.remove(\"active\");\n        });\n        row.classList.toggle(\"active\");\n    });\n});\n// Create form:\nvar form = document.createElement(\"form\");\nform.className = \"new-employee-form\";\nform.innerHTML = '\\n  <label>\\n    Name: <input name=\"name\" type=\"text\" data-qa=\"name\" required>\\n  </label>\\n  <label>\\n    Position: <input name=\"position\" type=\"text\" data-qa=\"position\" required>\\n  </label>\\n  <label>\\n    Office:\\n    <select name=\"office\" data-qa=\"office\" required>\\n      <option>Tokyo</option>\\n      <option>Singapore</option>\\n      <option>London</option>\\n      <option>New York</option>\\n      <option>Edinburgh</option>\\n      <option>San Francisco</option>\\n    </select>\\n  </label>\\n  <label>\\n    Age: <input name=\"age\" type=\"number\" data-qa=\"age\" required>\\n  </label>\\n  <label>\\n    Salary: <input name=\"salary\" type=\"number\" data-qa=\"salary\" required>\\n  </label>\\n  <button type=\"button\">Save to table</button>\\n';\nbody.append(form);\n// Add new row:\nform.querySelector(\"button\").addEventListener(\"click\", function() {\n    if (!checkFormFields()) return;\n    var newRow = document.createElement(\"tr\");\n    if (form.elements.name.value && form.elements.position.value && form.elements.office.value && form.elements.age.value && form.elements.salary.value) {\n        newRow.insertCell(0).textContent = form.elements.name.value.trim();\n        newRow.insertCell(1).textContent = form.elements.position.value.trim();\n        newRow.insertCell(2).textContent = form.elements.office.value.trim();\n        newRow.insertCell(3).textContent = parseInt(form.elements.age.value, 10);\n        var salaryFormatted = parseFloat(form.elements.salary.value.replace(/[^0-9.]/g, \"\"));\n        newRow.insertCell(4).textContent = \"$\".concat(new Intl.NumberFormat(\"us-IN\").format(salaryFormatted));\n        showNotification(\"Success!\", \"New employee is successfuly added\", \"success\");\n        form.reset();\n    }\n    tBody.append(newRow);\n});\n// Appearance of notifications:\nfunction showNotification(title, message, type) {\n    var notification = document.createElement(\"div\");\n    notification.className = \"notification \".concat(type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    notification.innerHTML = '\\n    <h2 class=\"title\">'.concat(title, \"</h2>\\n    <p>\").concat(message, \"</p>\\n  \");\n    document.body.append(notification);\n    setTimeout(function() {\n        notification.remove();\n    }, 4000);\n}\nfunction checkFormFields() {\n    var employeeName = form.elements.name.value.trim();\n    if (employeeName.length > 0 && employeeName.length < 4) {\n        showNotification(\"Error!\", \"The minimum name length is 4 letters\", \"error\");\n        return false;\n    }\n    var employeeAge = parseInt(form.elements.age.value, 10);\n    if (employeeAge < 18 || employeeAge > 90) {\n        showNotification(\"Error!\", \"You are too young/old for this\", \"error\");\n        return false;\n    }\n    _to_consumable_array(form.elements).every(function(input) {\n        if (input.tagName === \"INPUT\" || input.tagName === \"SELECT\") {\n            if (!input.value.trim()) {\n                showNotification(\"Error!\", \"Fill in all fields\", \"error\");\n                return false;\n            }\n        }\n        return true;\n    });\n    return true;\n}\ncells.forEach(function(cell) {\n    var editCell = document.createElement(\"input\");\n    editCell.classList.add(\"cell-input\");\n    cell.addEventListener(\"dblclick\", function() {\n        cell.replaceWith(editCell);\n    });\n    editCell.addEventListener(\"blur\", function(e) {\n        var td = document.createElement(\"td\");\n        if (editCell.value !== \"\") {\n            editCell.replaceWith(td);\n            td.textContent = editCell.value;\n        } else editCell.replaceWith(cell);\n    });\n    editCell.addEventListener(\"keypress\", function(e) {\n        var td = document.createElement(\"td\");\n        if (e.key === \"Enter\") {\n            editCell.replaceWith(td);\n            td.textContent = editCell.value;\n        }\n    });\n});\n\n//# sourceMappingURL=index.f7d4cc44.js.map\n","'use strict';\n\n// Sorting by header of column:\n\nconst body = document.querySelector('body');\nconst table = document.querySelector('table');\nconst headers = table.querySelectorAll('th');\nconst tBody = table.querySelector('tbody');\nconst cells = tBody.querySelectorAll('td');\nlet rows = [...tBody.querySelectorAll('tr')];\nconst sortOrder = Array(headers.length).fill(true);\n\nfunction updateRows() {\n  rows = [...tBody.querySelectorAll('tr')];\n}\n\nheaders.forEach((header, index) => {\n  header.addEventListener('click', () => {\n    setSortTable(index);\n  });\n});\n\nconst setSortTable = (columnIndex) => {\n  updateRows();\n\n  const sortedRows = rows.sort((a, b) => {\n    const aValue = a.cells[columnIndex].textContent.trim();\n    const bValue = b.cells[columnIndex].textContent.trim();\n\n    if (!isNaN(aValue) && !isNaN(bValue)) {\n      return sortOrder[columnIndex] ? aValue - bValue : bValue - aValue;\n    }\n\n    if (columnIndex === 4) {\n      const aSalary = parseFloat(aValue.replace(/[$,]/g, ''));\n      const bSalary = parseFloat(bValue.replace(/[$,]/g, ''));\n\n      return sortOrder[columnIndex] ? aSalary - bSalary : bSalary - aSalary;\n    }\n\n    return sortOrder[columnIndex]\n      ? aValue.localeCompare(bValue)\n      : bValue.localeCompare(aValue);\n  });\n\n  tBody.innerHTML = '';\n  tBody.append(...sortedRows);\n  sortOrder[columnIndex] = !sortOrder[columnIndex];\n};\n\n// Selecting row:\n\n[...tBody.rows].forEach((row) => {\n  row.addEventListener('click', (e) => {\n    const rowsActive = tBody.querySelectorAll('tr.active');\n\n    rowsActive.forEach((rowActive) => {\n      rowActive.classList.remove('active');\n    });\n\n    row.classList.toggle('active');\n  });\n});\n\n// Create form:\n\nconst form = document.createElement('form');\n\nform.className = 'new-employee-form';\n\nform.innerHTML = `\n  <label>\n    Name: <input name=\"name\" type=\"text\" data-qa=\"name\" required>\n  </label>\n  <label>\n    Position: <input name=\"position\" type=\"text\" data-qa=\"position\" required>\n  </label>\n  <label>\n    Office:\n    <select name=\"office\" data-qa=\"office\" required>\n      <option>Tokyo</option>\n      <option>Singapore</option>\n      <option>London</option>\n      <option>New York</option>\n      <option>Edinburgh</option>\n      <option>San Francisco</option>\n    </select>\n  </label>\n  <label>\n    Age: <input name=\"age\" type=\"number\" data-qa=\"age\" required>\n  </label>\n  <label>\n    Salary: <input name=\"salary\" type=\"number\" data-qa=\"salary\" required>\n  </label>\n  <button type=\"button\">Save to table</button>\n`;\n\nbody.append(form);\n\n// Add new row:\n\nform.querySelector('button').addEventListener('click', () => {\n  if (!checkFormFields()) {\n    return;\n  }\n\n  const newRow = document.createElement('tr');\n\n  if (\n    form.elements.name.value &&\n    form.elements.position.value &&\n    form.elements.office.value &&\n    form.elements.age.value &&\n    form.elements.salary.value\n  ) {\n    newRow.insertCell(0).textContent = form.elements.name.value.trim();\n    newRow.insertCell(1).textContent = form.elements.position.value.trim();\n    newRow.insertCell(2).textContent = form.elements.office.value.trim();\n    newRow.insertCell(3).textContent = parseInt(form.elements.age.value, 10);\n\n    const salaryFormatted = parseFloat(\n      form.elements.salary.value.replace(/[^0-9.]/g, ''),\n    );\n\n    newRow.insertCell(4).textContent =\n      `$${new Intl.NumberFormat('us-IN').format(salaryFormatted)}`;\n\n    showNotification(\n      'Success!',\n      'New employee is successfuly added',\n      'success',\n    );\n    form.reset();\n  }\n\n  tBody.append(newRow);\n});\n\n// Appearance of notifications:\n\nfunction showNotification(title, message, type) {\n  const notification = document.createElement('div');\n\n  notification.className = `notification ${type}`;\n  notification.setAttribute('data-qa', 'notification');\n\n  notification.innerHTML = `\n    <h2 class=\"title\">${title}</h2>\n    <p>${message}</p>\n  `;\n\n  document.body.append(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 4000);\n}\n\nfunction checkFormFields() {\n  const employeeName = form.elements.name.value.trim();\n\n  if (employeeName.length > 0 && employeeName.length < 4) {\n    showNotification('Error!', 'The minimum name length is 4 letters', 'error');\n\n    return false;\n  }\n\n  const employeeAge = parseInt(form.elements.age.value, 10);\n\n  if (employeeAge < 18 || employeeAge > 90) {\n    showNotification('Error!', 'You are too young/old for this', 'error');\n\n    return false;\n  }\n\n  [...form.elements].every((input) => {\n    if (input.tagName === 'INPUT' || input.tagName === 'SELECT') {\n      if (!input.value.trim()) {\n        showNotification('Error!', 'Fill in all fields', 'error');\n\n        return false;\n      }\n    }\n\n    return true;\n  });\n\n  return true;\n}\n\ncells.forEach((cell) => {\n  const editCell = document.createElement('input');\n\n  editCell.classList.add('cell-input');\n\n  cell.addEventListener('dblclick', () => {\n    cell.replaceWith(editCell);\n  });\n\n  editCell.addEventListener('blur', (e) => {\n    const td = document.createElement('td');\n\n    if (editCell.value !== '') {\n      editCell.replaceWith(td);\n      td.textContent = editCell.value;\n    } else {\n      editCell.replaceWith(cell);\n    }\n  });\n\n  editCell.addEventListener('keypress', (e) => {\n    const td = document.createElement('td');\n\n    if (e.key === 'Enter') {\n      editCell.replaceWith(td);\n      td.textContent = editCell.value;\n    }\n  });\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","body","document","querySelector","table","headers","querySelectorAll","tBody","cells","sortOrder","fill","forEach","header","index","addEventListener","setSortTable","columnIndex","sortedRows","rows","sort","a","b","aValue","textContent","trim","bValue","isNaN","aSalary","parseFloat","replace","bSalary","localeCompare","innerHTML","append","apply","row","e","rowsActive","rowActive","classList","remove","toggle","form","createElement","showNotification","title","message","type","notification","className","concat","setAttribute","setTimeout","checkFormFields","employeeName","elements","value","employeeAge","parseInt","age","every","input","tagName","newRow","position","office","salary","insertCell","salaryFormatted","Intl","NumberFormat","format","reset","cell","editCell","add","replaceWith","td","key"],"version":3,"file":"index.f7d4cc44.js.map"}